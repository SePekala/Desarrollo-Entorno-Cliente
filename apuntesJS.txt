-----------------------------------------
	Prototipos en javascript
-----------------------------------------
todo en javascript son objetos creados a partir de un "prototipo" (un prototipo no es una clase)
el prototipo "base" del cual derivan todos los objetos es el objeto global "OBJECT"

en todo objeto tienes propiedades (variables normales de javascript) y metodos (variables de tipo funcion)


	var objeto = prop1:valor, <--------------------------------- tiene como base prototipo Object
		     prop2: valor, 
		     .... 
		     metodo1:function(arg1, arg2,....){
							comando1
							comando2
							...
					},
		     metodo2:function(arg1, arg2,....){
							comando1
							comando2
							...
					},
		     ...
	          
                     }
						
si quisiera crearme mas objetos con esas props y metodos, seria un desperdicio copiar toooooda la estructura del objeto de nuevo
para evitarlo se generan las FUNCIONES PROTOTIPICAS q son funciones normales q cuando se invocan con la palabra reservada
"new" <--- OJO!! No es un constructor lo q hacen es construir un objeto a partir del objeto q definen:
	
	function Persona(nom,ape,nf){
		this.nombre = nom || "";
		this.apellidos = ape || "";
		this.nif = nf || "";

		this.saludar = function(){
					console.log('hola me llamo: ' + this.nombre + ', ' + this.apellidos);			
				};

		//console.log(this);
	}

	Persona('pablo','mr',12121212); <---- "this" hace referencia al objeto "global" en el q esta definida la funcion, 
	en este caso "Window"
	
	var yo = new Persona('pablo','mr',12121212); <---- aqui ejecutas Persona como una funcion creadora de un objeto Prototipo,
	con las propiedades nombre,apellidos,nif

	console.log(yo.nombre);//<--- por consola aparece 'pablo'
	yo.saludar;	/<---- muestra la referencia a la funcion
	yo.saludar();<--- ejecuta la funcion dentro del prototipo (metodo)

el escribir los metodos dentro de la funcion prototipo es un desperdicio de memoria pq creas dos objetos Persona
en base al prototipo:

	+---------------+	+----------------+
	   prop.nombre		   prop.nombre
	+---------------+	+----------------+
	   prop.apellidos	   prop.apellidos
	+---------------+	+----------------+
	   prop.nif		   prop.nif
	+---------------+	+----------------+
	   metodo saludar	   metodo saludar      <=== celdas de memoria con contenido exactamente igual... seria mejor q solo
	+---------------+	+----------------+          apunten a una direccion sonde se defina una sola vez el metodo saludar
						            ¿como se hace?
							    fuera de la funcion prototipo;
							    nombreFunctionPrototipo.prototype.nombre_metodo=function(arg1,...){ ... }



	+---------------+	+----------------+
	   prop.nombre		   prop.nombre
	+---------------+	+----------------+
	   prop.apellidos	   prop.apellidos
	+---------------+	+----------------+
	   prop.nif		   prop.nif
	+---------------+	+----------------+
	   ref.saludar		   ref.saludar    	<=== +-----------------+
	+---------------+	+----------------+            metodo saludar
							     +-----------------+


	function Persona(nom,ape,nf){
		this.nombre=nom || "";
		this.apellido=ape || "";
		this.nif=nf || "";

	}
	Persona.prototype.saludar=function(){
						console.log('hola me llamo: ' + this.nombre + ', ' + this.apellidos);
					};

	Persona.prototype.dameNIF=function(){
						console.log('mi nif es: ' + this.nif);
					};


PROTOTYPE-CHAIN(CADENA DE PROTOTIPOS): cuando preguntas sobre un objeto por el valor de una propiedad o metodo, lo va a buscar en primer lugar 
en la funcion prototipica q lo ha creado, si no lo encuentra pasa al prototipo superior en la cadena, sino lo encuentra al superior... asi
hasta llegar al prototipo base q es object. EJ:

 
	yo.toString(); <---- busca el metodo .toString() en funcion Persona, como no esta deefinido ahi, pasa al sig. prototipo en este
				caso "Object" y si aqui no lo encuentra, mostrara "undefined".


¿ como se encadenan prototipos? (simular la herencia)

tenemos un prototipo Padre base: Object <---- prototipo Persona <------ prototipo Alumno
dos formas:

1º)
	nombreFuncionPrototipoHijo.prototype = nombreFuncionPrototipoPadre.prototype // todos los objetos q se crean con la funcion
											prototip.hija ahora se crean con la funcion 
											prot.padre..¿q pasa con las props y metodos 
											definidos en la funcion hija?

	nombreFuncionPrototipoHijo.prototype.constructor=nombreFuncPrototipoHijo	
	
	//OJO!! q los metodos del prototipo hijo se borran si haces esto despues de definirlos, o los defines dentro del prototipo
	hijo o despues


2º)
	nombreFuncionPrototipoHijo.prototype = new ObjetoPadre(); //<--- desperdicias la creacion de un objeto a posta solo para definir
									 el nuevo prot. de los objetos hijos


	//------------prototipo padre-------------------------------
	function Persona(nom,ape,nf){
		this.nombre=nom || "";
		this.apellido=ape || "";
		this.nif=nf || "";

	}
	Persona.prototype.saludar=function(){
						console.log('hola me llamo: ' + this.nombre + ', ' + this.apellidos);
					};

	Persona.prototype.dameNIF=function(){
						console.log('mi nif es: ' + this.nif);
					};

	//------------prototipo hijo-------------------------------
	function Alumno(cursos, turno, ies){
		this.cursos=cursos || [];
		this.apellido=ape || "";
		this.nif=nf || "";

	}
	Alumno.prototype.DameTusCursos=function(){
						//for(var I=0; i < cursos.lenght; i++){
						//	console.log('estoy matriculado en: ' + this.cursos[i]);
						//}

						this.cursos.forEach((el) => console.log('estoy matriculado en: ' + el));
						}
	};

	//=================== simulamos herencia ===================
	Alumno.prototype=Persona.prototype;
	Alumno.prototype.constructor=Alumno;

	var yo=new Alumno ['1daw','2daw'], 'vespertino', 'alonso de avellaneda');
	yo.DameTusCursos();

	yo.nombre='eugenio';//<== ¿me dejara?



//===================================== en formulario de registro de Agapea.com ===========================================
el boton registrar debe estar deshabilitado hasta q todos los elementos input esten validados
por cada elemento input del formulario hay que crearse un prototipo:

	ElementoForm:
		- props:
			id
			valor
			validado
		- metodos:
			validarContenido() <--- en funcion del id, el patron de validacion cambia






